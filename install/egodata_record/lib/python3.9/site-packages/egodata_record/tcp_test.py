import socket
import pyzed.sl as sl
import cv2
import numpy as np
import time
import matplotlib.pyplot as plt

UDP_IP = "0.0.0.0"
UDP_PORT = 5005

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.setblocking(False)

# ========== ÂàùÂßãÂåñ ZED ==========
zed = sl.Camera()
init_params = sl.InitParameters()
init_params.camera_resolution = sl.RESOLUTION.HD720
init_params.camera_fps = 30
init_params.coordinate_system = sl.COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP
init_params.coordinate_units = sl.UNIT.METER

err = zed.open(init_params)
if err != sl.ERROR_CODE.SUCCESS:
    print("Camera Open : " + repr(err) + ". Exit program.")
    exit(1)

tracking_params = sl.PositionalTrackingParameters()
err = zed.enable_positional_tracking(tracking_params)
if err != sl.ERROR_CODE.SUCCESS:
    print("Enable tracking error:", err)
    zed.close()
    exit(1)

runtime_params = sl.RuntimeParameters()
zed_pose = sl.Pose()

# ========== Â≠òÂÇ®ËΩ®Ëøπ ==========
glasses_pose = []  # [timestamp, x,y,z,qx,qy,qz,qw]
zed_traj = []      # Âêå‰∏ä

recording = False
running = True

def start_recording():
    global recording, glasses_pose, zed_traj
    recording = True
    glasses_pose = []
    zed_traj = []
    print("üé¨ Start recording trajectories...")

def stop_recording():
    global recording, running
    recording = False
    running = False
    print("üõë Stop recording")

while running:
    timestamp = time.time()

    # 1) Êé•Êî∂ UDP Ê∂àÊÅØ
    try:
        data, addr = sock.recvfrom(1024)
        msg = data.decode().strip().split(",")
        if msg[0] == "start":
            start_recording()
        elif msg[0] == "stop":
            stop_recording()
        elif msg[0] == "pose" and recording:
            x, y, z = map(float, msg[1:4])
            glasses_pose.append([timestamp, x, y, z, 0.0, 0.0, 0.0, 1.0])

    except BlockingIOError:
        pass

    # 2) Ëé∑Âèñ ZED tracking
    if recording and zed.grab(runtime_params) == sl.ERROR_CODE.SUCCESS:
        zed.get_position(zed_pose, sl.REFERENCE_FRAME.WORLD)
        py_translation = sl.Translation()
        tx, ty, tz = zed_pose.get_translation(py_translation).get()
        zed_traj.append([timestamp, tx, ty, tz, 0.0, 0.0, 0.0, 1.0])

# Ê∏ÖÁêÜ
zed.close()
sock.close()

# ========== ‰øùÂ≠ò TUM Ê†ºÂºè ==========
def save_tum(filename, traj):
    with open(filename, "w") as f:
        for t in traj:
            f.write("{:.6f} {:.6f} {:.6f} {:.6f} {:.6f} {:.6f} {:.6f} {:.6f}\n".format(*t))
    print(f"Saved {len(traj)} poses to {filename}")

if glasses_pose:
    save_tum("glasses_trajectory.txt", glasses_pose)

if zed_traj:
    save_tum("zed_trajectory.txt", zed_traj)

# ========== ÂèØËßÜÂåñ ==========
if glasses_pose or zed_traj:
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    if glasses_pose:
        g = np.array(glasses_pose)
        ax.plot(g[:,1], g[:,2], g[:,3], 'r-', label="AI Glasses")

    if zed_traj:
        z = np.array(zed_traj)
        ax.plot(z[:,1], z[:,2], z[:,3], 'b-', label="ZED")

    ax.set_xlabel("X (m)")
    ax.set_ylabel("Y (m)")
    ax.set_zlabel("Z (m)")
    ax.legend()
    ax.set_title("Trajectory Comparison")
    plt.show()
